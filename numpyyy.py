# -*- coding: utf-8 -*-
"""numpyyy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzJmtyDRGxKgIiJea0KNJqnXMREOuQrE
"""

print("kart")

l1=[10,20,30,40]
l1

l1.insert(2,25)
l1

l1=[10,20,30,40,50,60]
l1.index(40,4)
l1

l2=[1,2,3]
l3=[4,5,6]
l3.extend(l2)
l2.extend(l3)
print(l3)
print(l2)

import numpy as np

a=np.array([1,2,3])
print(a)
print(np.size(a))

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(np.size(arr))

a=np.array([1,2,3],dtype=np.float64)
print(a)

a= np.ones(( 3, 4),dtype=int)
print(a)

a= np.ones(( 4,3, 2))
print(a)

c=np.full((2,2),7)
print(c)

d=np.eye(3,dtype=int)
#print(type(d))
print(d)

e=np.random.random((2,3))
print(e)

f=np.arange(10,50,5)
print(f)

import pylab as p
#g = np.linspace(0, 2, 10, endpoint = False)
#g1 = np.ones(10)
g=np.array([1,2,3,4])
g1=np.array([1,2,3,4])
p.plot(g, g1, '*')

a=np.array([[1,2],[3,4],[5,6]])
print(a[0][1])
print(a[1:3])
print(a[0:3,0])

a=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
b=a[:2,1:3]
print(b)
c=a[1:3,2:4]
print(c)

arr = np.array([1, 2, 3, 4])
print(arr[2] + arr[3])

a=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(a)

row_r1=a[1,:]
row_r2=a[1:2,:]# within range  so nested array, rows and columns will there as range
row_r3=a[[1],:]
print(row_r1,row_r1.shape)
print(row_r2,row_r2.shape)
print(row_r3,row_r3.shape)

#columns
col_r1=a[:,1]
col_r2=a[:,1:2]# within range  so nested array, rows and columns will there
print(col_r1,col_r1.shape)
print()
print(col_r2,col_r2.shape)

import numpy as np

a=np.array([[1,2,3],[5,6,7],[9,10,11],[12,13,14]])
print(a)
print(a.shape)

import numpy as np
a=np.array([[1,2,3],[5,6,7],[9,10,11],[12,13,14]])
b=np.array([0,2,0,1])
print(a[np.arange(4,b)])

a=[1,2,3,4,5,8,9]
print(np.argmax(a))
print(np.argmin(a))
print(np.argsort(a))
c=np.append(a,[4,5,6])
print(c)

arr = np.array([[1, 2, 3],
                [4, 5, 6]])
print("Array with Rank 2: \n", arr)

import numpy as np

# Integer datatype
# guessed by Numpy
x = np.array([1, 2])
print(x.dtype)

# Float datatype
# guessed by Numpy
x = np.array([1.0, 2.0])
print(x.dtype)

# Forced Datatype
x = np.array([1, 2], dtype = np.float64)
print(x.dtype)

arr1=[4,16,25,100]
print(np.sqrt(arr1))

arr1 = np.array([[4, 7], [2, 6]],
                 dtype = np.float64)
Trans_arr = arr1.T
print(Trans_arr)
Sum1 = np.sum(arr1)
print(Sum1)

x = np.array([[4, 7], [2, 6],[4,5]])
y = np.array([[4, 7], [2, 6]])
v= np.array([4, 7])
w=np.array([4, 7])
print(v.shape)
print(x.shape)
print()
print(x.reshape(2,3))
print(x)
print(x.reshape(3,2))
y=w.reshape(-1,)#squeezing
print(y)

#  broadcasting --- spreading from one place to another
a = np.array([5, 7, 3, 1])
b = np.array([90, 50, 0, 30])
d=2
# array are compatible because of same Dimension
c = a * b* d
print(c)

#broadcasting
import numpy as np
A = np.array([[11, 22, 33], [10, 20, 30]])
print(A)
print()
b = np.array([1,1,1])
print(b)
print()
C = A + b
print(C)

import numpy as np

v = np.array([1, 2, 3])
w = np.array([4, 5])

# To compute an outer product we first
# reshape v to a column vector of shape 3x1
# then broadcast it against w to yield an output
# of shape 3x2 which is the outer product of v and w
print(np.reshape(v, (3, 1)) * w)

x = np.array([[1, 2, 3], [4, 5, 6]])

# x has shape 2x3 and v has shape (3,)
# so they broadcast to 2x3,
print(x + v)

# Add a vector to each column of a matrix X has
# shape 2x3 and w has shape (2, ) If we transpose X
# then it has shape 3x2 and can be broadcast against w
# to yield a result of shape 3x2.

# Transposing this yields the final result
# of shape 2x3 which is the matrix.
print((x.T + w).T)

# Another solution is to reshape w to be a column
# vector of shape 2X1 we can then broadcast it
# directly against X to produce the same output.
print(x + np.reshape(w, (2, 1)))

# Multiply a matrix by a constant, X has shape 2x3.
# Numpy treats scalars as arrays of shape();
# these can be broadcast together to shape 2x3.
print(x * 2)