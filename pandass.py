# -*- coding: utf-8 -*-
"""pandass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-5rFE_Bco_ob6IUTsMLoL9SmNtDPBQyF
"""

import numpy as np
import pandas as pd

a=np.array([1,2,3])
a

type(a)

import pandas as pd
s=pd.Series([10,20,30,40])
print(s)
print(type(s))

s[3]

import pandas as pd
s=pd.Series([10,20,30,40])
s.drop(1,inplace=True)#remove
print(s)

import pandas as pd
s=pd.Series([10,20,30,40])
s.iloc[2]

s.index

import pandas as pd
s=pd.Series([10,20,30,40,50],index=['k','k','r','t','h'])
print(s)

s.loc['k']

print(s.iloc[1])

#create data name,age,DOB
data=[['karthikakumaravel',19,'29-11-2003'],['yuvaranii',17,None],['Mohankumar',16,'22-02-2008']]
data

df=pd.DataFrame(data)
df

df[0:2]

df[0][0]

df[[0,2]]

df[0][2]

df[0][1]

df[1:2]

df=pd.DataFrame(data,columns=['name','age','dob'])
df

#df['name']
df['age']
#df[0:1]

df['name'][1]

df.loc[2,'name']
df.loc[1,'name']
df.loc[0,'name']

df.iloc[:0]

df.iloc[0:1] #since we created columns name it get accessed using attribute

s=pd.Series([1,2,3])
s.plot()

s.hist(bins=3)

type(s)

#convert above series to numpy -->we can convert
s.to_numpy()

#now we can check the above series s
type(s)

df.head()#first 5 rows
print(df.head(2)) #first 2

#df.tail(-3)
df.tail(-2)

# None,' ','','-','?','Nil',np.nan(not a number)

df

df.isnull().sum()

da=[['karthi',20,'26jul'],['jay',None,'28sept'],['kows',19,'oct19'],['rajesh',19,None],['mal',None,None],['ambi',None,None],['rose',20,None]]
df=pd.DataFrame(da,columns=['name','age','D.O.B'])
df

df.isnull().sum()

df.dropna()

df.dropna(inplace=True)
df

da=[['karthi',20,'26jul'],['jay',None,'28sept'],['kows',19,'oct19'],['rajesh',19,None],['mal',None,None],['ambi',None,None],['rose',20,None]]
df=pd.DataFrame(da,columns=['name','age','D.O.B'])
df.drop(6,axis=0,inplace=True)
#axis=1 means column,axis=0 means row

df

print(df)
print()
print(df.drop([1,4,5]))#here only this row need to be deleted
print()
print(df.drop(['age','name'],axis=1))

print(df)
df.info()

df['name'].str.contains('e')

df['name'].str.contains('e')

print(df.shape)
print(df.size)
print(df.axes)
print(df.ndim)
print(df.dtypes)
print(df.index)
print(df.columns)
print(df.values)

df.info()

df.tail(2)

print(df)
df2=pd.concat(df,df)
print(df2)
print(dfc=pd.copy(df))

df.describe()

df1=df.describe(include="all")
df1

df[['name','age']] #within bracket

#f[['name[0]','age']]
df.loc[0][0]

df.loc[0,'name']

df.loc[2,'name']

df.iloc[1,1] #fisrt argument is first attribute,second argument is second attribute

df=pd.DataFrame(data,columns=['name','age','dob'])
df

df.iloc[0,2]

#df["dob"][1]='29-11'

a

print(a)

a>40

a<2

print(a[a%2!=0])

print(a[a%2==0])

df=pd.read_html("https://en.wikipedia.org/wiki/Tiger")

type(df)

df=pd.read_table("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/chipotle.tsv")
df

df.isnull().sum()

#null value- mode,mean,median
type(df.item_name)

type(df.item_price[0])

#(oldvalue,newvalue)
#df.item_price=df.item_price.str.replace('$','')
#df.head(10)

#df.item_price=df.item_price.astype(int) #converting the float as int
#df

#type(df.item_price[1])

#df.item_price=df.item_price.astype(int) #converting the float as int
#print(df.item_price*100)

df.item_price=df.item_price.astype(float) #converting the float as same as float
df

#print(df.item_price*100)
#print(type(df))

df_drink=df[df.item_price < 2]
df_drink

df_drink.item_name.unique()

df_drink.item_name.nunique()

df_drink.item_name.value_counts()

#canned soda - full details to be needed
df[df.item_name=='Canned Soda']

#only i need choice_description of the canned soda
df[df.item_name=='Canned Soda'].choice_description.value_counts()

#need no of uniqque values count
df[df.item_name=='Canned Soda'].choice_description.nunique()

df[df.item_name=='Steak Burrito'].choice_description.nunique()

df.dropna(inplace=True) #drop to remove the null values

df[df.choice_description.str.contains('Black Beans')].item_name

df[df.choice_description.str.contains('Black Beans')].item_name.value_counts()

df[(df.item_price<10)&(df.item_name=='Chicken Bowl')]

df[(df.item_price<10)&(df.item_name=='Chicken Bowl')].sort_values(['item_price'])

df=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/imdb_1000.csv")
df.head()

df[(df.star_rating>=9)&(df.content_rating=='PG-13')]

df[(df.star_rating>=8)&(df.content_rating=='PG-13')].sort_values(['duration'])

df[df.actors_list.str.contains('Daniel Radcliffe')].title

df[df.actors_list.str.contains('Daniel Radcliffe')].sort_values(['duration' and 'star_rating'])

df[df.actors_list.str.contains('Daniel Radcliffe')].sort_values(['duration'])

df[df.actors_list.str.contains('Daniel Radcliffe')].sort_values(['star_rating','duration'],ascending=[False,True])

ufo=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/ufo.csv")
ufo

ufo.dropna(subset=['City','Shape Reported'],how='any').shape

ufo['Shape Reported'].isnull().sum()

ufo.dropna(subset=['City','Shape Reported'],how='all').shape

dff=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/drinks.csv")
dff

dff.info()

dff.beer_servings.mean()



dff.beer_servings.min()



dff.beer_servings.max()



dff[dff.continent=='Asia']



dff[dff.continent=='Asia'].describe()

dff[dff.continent.str.contains('Asia')].describe()

dff[dff.continent.str.contains('Asia')].beer_servings.agg(['mean','min','max'])

dff.groupby('continent').beer_servings.max()

dff[dff.continent.str.contains('Asia')].describe()

dff.groupby('continent').beer_servings.agg(['mean','min','max'])

https://t.ly/HIwPM