# -*- coding: utf-8 -*-
"""Polynomial Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166yvAllmEm-Sy_nOr7hlnj2AXNEJpWn0
"""

import numpy as np
import matplotlib.pyplot as plt

x=np.array([1,2,3,4,5]) #
y=np.array([2,4,6,8,10]) #actual output

degree=2

x_poly=np.column_stack([x**i for i in range(degree+1)])
x_poly


#design matrix  x0,x,x square

weights=np.zeros(degree+1)
weights

learning_rate=0.001
num_iterations=10000

for _ in range(num_iterations):
  #calculate predictions
  predictions=np.dot(x_poly,weights)
  #calculate errors
  error=predictions-y
  #update weights(coeffecient) using gradient descent
  gradient=np.dot(x_poly.T,error)/len(x)
  weights -=learning_rate*gradient
  print(f'weights {_}:{weights}')

def predict(x,weights):
  x_poly=np.array([x**i for i in range(degree+1)])
  return np.dot(x_poly,weights)

plt.scatter(x, y, label="Data Points")
x_range=np.linspace(min(x),max(x),100)
y_pred=[predict(x,weights) for x in x_range]
plt.plot(x_range,y_pred,color='r',label="polynomial regression")
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()

