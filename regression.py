# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GNp1nyqk73XHiLRIUZGz1kWQawOujw-N
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

data=pd.read_csv("https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/Position_Salaries.csv")
data

x=data.iloc[:,1:2].values
x

y=data.iloc[:,2].values
y

from sklearn.linear_model import LinearRegression

lin_reg=LinearRegression#this is just for reference
lin_reg=LinearRegression()
lin_reg.fit(x,y)

from sklearn.preprocessing import PolynomialFeatures
poly_reg2=PolynomialFeatures(degree=2)
x_poly2=poly_reg2.fit_transform(x)

lin_reg_2=LinearRegression()
lin_reg_2.fit(x_poly2,y)

from sklearn.preprocessing import PolynomialFeatures
poly_reg3 = PolynomialFeatures(degree=3)
x_poly3 = poly_reg3.fit_transform(x)

lin_reg_3=LinearRegression()
lin_reg_3.fit(x_poly3,y)

plt.scatter(x, y, color='red')
plt.plot(x,lin_reg.predict(x),color='blue')
plt.title('lr')
plt.xlabel('position level')
plt.ylabel('salary')
plt.show()

plt.scatter(x, y, color='red')
plt.plot(x,lin_reg_2.predict(x_poly2),color='blue')
plt.plot(x,lin_reg_3.predict(x_poly3),color='GREEN')
plt.title('polynomial linear regression')
plt.xlabel('position level')
plt.ylabel('salary')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

data=pd.read_csv("https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/Real%20estate.csv")
data.head(5)

data.shape

data.info()

data.corr()

plt.subplots(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap="Blues",)

sns.displot(data=data,x='Y house price of unit area',kde=True,color='r')

x=data.drop('Y house price of unit area',axis=1)
x

y=data['Y house price of unit area']
y

poly_reg=PolynomialFeatures(degree=2,include_bias=False)

poly_feat=poly_reg.fit_transform(x)
poly_feat.shape

x_train,x_test,y_train,y_test=train_test_split(poly_feat,y,test_size=0.3,random_state=101)

polymodel=LinearRegression()

polymodel.fit(x_train,y_train)

y_pred=polymodel.predict(x_test)

pd.DataFrame({'Y_Test':y_test,'Y_pred':y_pred,'Residuals':(y_test-y_pred)})

poly_MAE=metrics.mean_absolute_error(y_test,y_pred)
poly_MSE=metrics.mean_squared_error(y_test,y_pred)
poly_RMC=np.sqrt(poly_MSE)

print(poly_MSE)

ridge regression